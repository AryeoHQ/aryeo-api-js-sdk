/**
 * Aryeo
 *
 * Contact: jarrod@aryeo.com
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Appointment from './Appointment';
import Group from './Group';
import Listing from './Listing';
import OrderItem from './OrderItem';
import UnconfirmedAppointment from './UnconfirmedAppointment';

/**
 * The Order model module.
 * @module model/Order
 * @version 2021-06-17
 */
class Order {
    /**
     * Constructs a new <code>Order</code>.
     * A payment request for some content or service.
     * @alias module:model/Order
     * @param id {String} ID of the order. UUID Version 4.
     * @param number {Number} A vanity id used for internal tracking of orders for a given vendor.
     * @param title {String} The title of the order, generated by combining the order's number property with the prefix \"Order #\".
     * @param fulfillmentStatus {module:model/Order.FulfillmentStatusEnum} The fulfillment status of the order.
     * @param paymentStatus {module:model/Order.PaymentStatusEnum} The payment status of the order.
     * @param statusUrl {String} A URL of a publicly-accessible webpage to see the order's status.
     */
    constructor(id, number, title, fulfillmentStatus, paymentStatus, statusUrl) { 
        
        Order.initialize(this, id, number, title, fulfillmentStatus, paymentStatus, statusUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, number, title, fulfillmentStatus, paymentStatus, statusUrl) { 
        obj['id'] = id;
        obj['number'] = number;
        obj['title'] = title;
        obj['fulfillment_status'] = fulfillmentStatus;
        obj['payment_status'] = paymentStatus;
        obj['status_url'] = statusUrl;
    }

    /**
     * Constructs a <code>Order</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Order} obj Optional instance to populate.
     * @return {module:model/Order} The populated <code>Order</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Order();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('fulfillment_status')) {
                obj['fulfillment_status'] = ApiClient.convertToType(data['fulfillment_status'], 'String');
            }
            if (data.hasOwnProperty('payment_status')) {
                obj['payment_status'] = ApiClient.convertToType(data['payment_status'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('total_amount')) {
                obj['total_amount'] = ApiClient.convertToType(data['total_amount'], 'Number');
            }
            if (data.hasOwnProperty('payment_url')) {
                obj['payment_url'] = ApiClient.convertToType(data['payment_url'], 'String');
            }
            if (data.hasOwnProperty('status_url')) {
                obj['status_url'] = ApiClient.convertToType(data['status_url'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = Group.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('listing')) {
                obj['listing'] = Listing.constructFromObject(data['listing']);
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [OrderItem]);
            }
            if (data.hasOwnProperty('appointments')) {
                obj['appointments'] = ApiClient.convertToType(data['appointments'], [Appointment]);
            }
            if (data.hasOwnProperty('unconfirmed_appointments')) {
                obj['unconfirmed_appointments'] = ApiClient.convertToType(data['unconfirmed_appointments'], [UnconfirmedAppointment]);
            }
        }
        return obj;
    }


}

/**
 * ID of the order. UUID Version 4.
 * @member {String} id
 */
Order.prototype['id'] = undefined;

/**
 * A vanity id used for internal tracking of orders for a given vendor.
 * @member {Number} number
 */
Order.prototype['number'] = undefined;

/**
 * The title of the order, generated by combining the order's number property with the prefix \"Order #\".
 * @member {String} title
 */
Order.prototype['title'] = undefined;

/**
 * The fulfillment status of the order.
 * @member {module:model/Order.FulfillmentStatusEnum} fulfillment_status
 */
Order.prototype['fulfillment_status'] = undefined;

/**
 * The payment status of the order.
 * @member {module:model/Order.PaymentStatusEnum} payment_status
 */
Order.prototype['payment_status'] = undefined;

/**
 * The three-letter ISO 4217 currency code for the currency in which this order was or will be transacted. Must be a supported currency of Aryeo.
 * @member {module:model/Order.CurrencyEnum} currency
 */
Order.prototype['currency'] = undefined;

/**
 * A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the total order amount that was or will be charged. This accounts for order items and taxes. 
 * @member {Number} total_amount
 */
Order.prototype['total_amount'] = undefined;

/**
 * A URL of a publicly-accessible webpage to pay for the order.
 * @member {String} payment_url
 */
Order.prototype['payment_url'] = undefined;

/**
 * A URL of a publicly-accessible webpage to see the order's status.
 * @member {String} status_url
 */
Order.prototype['status_url'] = undefined;

/**
 * @member {module:model/Address} address
 */
Order.prototype['address'] = undefined;

/**
 * @member {module:model/Group} customer
 */
Order.prototype['customer'] = undefined;

/**
 * @member {module:model/Listing} listing
 */
Order.prototype['listing'] = undefined;

/**
 * items
 * @member {Array.<module:model/OrderItem>} items
 */
Order.prototype['items'] = undefined;

/**
 * @member {Array.<module:model/Appointment>} appointments
 */
Order.prototype['appointments'] = undefined;

/**
 * @member {Array.<module:model/UnconfirmedAppointment>} unconfirmed_appointments
 */
Order.prototype['unconfirmed_appointments'] = undefined;





/**
 * Allowed values for the <code>fulfillment_status</code> property.
 * @enum {String}
 * @readonly
 */
Order['FulfillmentStatusEnum'] = {

    /**
     * value: "FULFILLED"
     * @const
     */
    "FULFILLED": "FULFILLED",

    /**
     * value: "UNFULFILLED"
     * @const
     */
    "UNFULFILLED": "UNFULFILLED"
};


/**
 * Allowed values for the <code>payment_status</code> property.
 * @enum {String}
 * @readonly
 */
Order['PaymentStatusEnum'] = {

    /**
     * value: "PAID"
     * @const
     */
    "PAID": "PAID",

    /**
     * value: "UNPAID"
     * @const
     */
    "UNPAID": "UNPAID"
};


/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
Order['CurrencyEnum'] = {

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD",

    /**
     * value: "CAD"
     * @const
     */
    "CAD": "CAD",

    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",

    /**
     * value: "CHF"
     * @const
     */
    "CHF": "CHF",

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "AUD"
     * @const
     */
    "AUD": "AUD",

    /**
     * value: "NZD"
     * @const
     */
    "NZD": "NZD",

    /**
     * value: "ZAR"
     * @const
     */
    "ZAR": "ZAR"
};



export default Order;

